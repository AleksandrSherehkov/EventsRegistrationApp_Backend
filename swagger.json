{
  "openapi": "3.0.0",
  "info": {
    "title": "Event Registration API",
    "description": "API for event management and user registration",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://eventsregistrationapp-backend.onrender.com",
      "description": "Production server"
    }
  ],
  "tags": [
    {
      "name": "Events",
      "description": "Operations related to events"
    },
    {
      "name": "Users",
      "description": "Operations related to users"
    }
  ],
  "paths": {
    "/api/events": {
      "get": {
        "tags": ["Events"],
        "summary": "List all events",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 9
            }
          },
          {
            "name": "filterQuery",
            "in": "query",
            "description": "Query filter",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "category",
            "in": "query",
            "description": "Category filter",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "Date filter",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Sort by field",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["title", "category", "date"]
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "Sort order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of events",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventArrayResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      },
      "post": {
        "tags": ["Events"],
        "summary": "Create a new event",
        "requestBody": {
          "description": "Event to add",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Event created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/events/{id}": {
      "get": {
        "tags": ["Events"],
        "summary": "Get an event by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Event details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          },
          "404": {
            "description": "Event not found"
          }
        }
      },
      "put": {
        "tags": ["Events"],
        "summary": "Update an event by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Event data to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Event updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          },
          "404": {
            "description": "Event not found"
          }
        }
      },
      "delete": {
        "tags": ["Events"],
        "summary": "Delete an event by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Event deleted"
          },
          "404": {
            "description": "Event not found"
          }
        }
      }
    },
    "/api/users": {
      "get": {
        "tags": ["Users"],
        "summary": "List all users",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 9
            }
          },
          {
            "name": "filterQuery",
            "in": "query",
            "description": "Query filter",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserArrayResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      },
      "post": {
        "tags": ["Users"],
        "summary": "Create a new user",
        "requestBody": {
          "description": "User to add",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "User created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/users/event/{eventId}": {
      "get": {
        "tags": ["Users"],
        "summary": "Get users by event ID",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 9
            }
          },
          {
            "name": "filterQuery",
            "in": "query",
            "description": "Query filter",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserArrayResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/users/registrations/{eventId}": {
      "get": {
        "tags": ["Users"],
        "summary": "Get registrations per day for an event",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Registration data",
            "content": {
              "image/png": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/users/up/ping": {
      "get": {
        "tags": ["Users"],
        "summary": "Ping the server",
        "responses": {
          "200": {
            "description": "Server is alive",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Event": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title of the event"
          },
          "description": {
            "type": "string",
            "description": "Description of the event"
          },
          "category": {
            "type": "string",
            "description": "Category of the event"
          },
          "country": {
            "type": "string",
            "description": "Country where the event is held"
          },
          "date": {
            "type": "string",
            "format": "date",
            "description": "Date of the event"
          }
        }
      },
      "EventInput": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "date": {
            "type": "string",
            "format": "date"
          }
        },
        "required": ["title", "description", "category", "country", "date"]
      },
      "EventArrayResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "example": 12
          },
          "page": {
            "type": "integer",
            "example": 1
          },
          "pages": {
            "type": "integer",
            "example": 2
          },
          "limit": {
            "type": "integer",
            "example": 9
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the user"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email of the user"
          },
          "birthDate": {
            "type": "string",
            "description": "Birth date of the user"
          },
          "referralSource": {
            "type": "string",
            "description": "Referral source of the user"
          },
          "eventIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of event IDs the user is registered for"
          }
        }
      },
      "UserInput": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "birthDate": {
            "type": "string"
          },
          "referralSource": {
            "type": "string"
          },
          "eventId": {
            "type": "string"
          }
        },
        "required": ["name", "email", "birthDate", "referralSource", "eventId"]
      },
      "UserArrayResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "example": 12
          },
          "page": {
            "type": "integer",
            "example": 1
          },
          "pages": {
            "type": "integer",
            "example": 2
          },
          "limit": {
            "type": "integer",
            "example": 9
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          }
        }
      }
    }
  }
}
